# Generated by Django 4.2.8 on 2025-02-21 11:49

import core.enums
import core.fields
import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("authentikate", "0002_alter_user_unique_together_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the experiment", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the experiment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Expression",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the entity class",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the entity class",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "purl",
                    models.CharField(
                        help_text="The PURL of the entity class",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.JSONField(
                        default=core.models.random_color,
                        help_text="The color of the entity class as RGB",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Graph",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the entity group", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the entity group",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        blank=True,
                        help_text="The experiment this entity group belongs to (if its part of an experiment)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graphs",
                        to="core.experiment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GraphQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query",
                    models.CharField(
                        help_text="The query that is used to materialize the graph",
                        max_length=7000,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the materialized graph", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the materialized graph",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of the materialized graph (i.e path, property, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        default=None,
                        help_text="The columns (if ViewKind is Table)",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GraphView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The time the view was created"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        help_text="The user that created the view",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graph_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "graph",
                    models.ForeignKey(
                        help_text="The graph this materialized graph belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graph_views",
                        to="core.graph",
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The query that is used to materialize the graph",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="core.graphquery",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MaterializedGraph",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "materialized_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The time the model was materialized. All newer entities are not part of the materialized graph",
                    ),
                ),
                (
                    "view",
                    models.ForeignKey(
                        help_text="The graph this model was trained on",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="materialized_graphs",
                        to="core.graphview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query",
                    models.CharField(
                        help_text="The query that is used to materialize the graph",
                        max_length=7000,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the materialized graph", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the materialized graph",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of the materialized graph (i.e path, property, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        default=None,
                        help_text="The columns (if ViewKind is Table)",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProtocolStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "performed_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "for_entity_id",
                    models.CharField(
                        blank=True,
                        help_text="The entity that this step is for",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "variable_mappings",
                    models.JSONField(
                        blank=True,
                        help_text="A mapping of variables to values for this step",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reagent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the reagent is the active stock for most experiments",
                    ),
                ),
                (
                    "mass",
                    models.FloatField(
                        blank=True,
                        help_text="The mass of the reagent in the protocol",
                        null=True,
                    ),
                ),
                (
                    "lot_id",
                    models.CharField(
                        blank=True,
                        help_text="The lot number of the reagent",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "order_id",
                    models.CharField(
                        blank=True,
                        help_text="The order id of the reagent",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "expression",
                    models.ForeignKey(
                        help_text="The type of reagent (based on an ontology)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.expression",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="S3Store",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "path",
                    core.fields.S3Field(
                        blank=True,
                        help_text="The stodre of the image",
                        max_length=500,
                        null=True,
                        unique=True,
                    ),
                ),
                ("key", models.CharField(max_length=1000)),
                ("bucket", models.CharField(max_length=1000)),
                ("populated", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="BigFileStore",
            fields=[
                (
                    "s3store_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.s3store",
                    ),
                ),
            ],
            bases=("core.s3store",),
        ),
        migrations.CreateModel(
            name="GenericCategory",
            fields=[
                (
                    "expression_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.expression",
                    ),
                ),
                (
                    "instance_kind",
                    models.CharField(
                        blank=True,
                        help_text="The instance kind that the node relates to",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "generic_categories",
            },
            bases=("core.expression",),
        ),
        migrations.CreateModel(
            name="MeasurementCategory",
            fields=[
                (
                    "expression_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.expression",
                    ),
                ),
                (
                    "metric_kind",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("INT", "Int"),
                            ("FLOAT", "Float"),
                            ("DATETIME", "Datetime"),
                            ("STRING", "String"),
                            ("CATEGORY", "Category"),
                            ("BOOLEAN", "Boolean"),
                            ("THREE_D_VECTOR", "Three D Vector"),
                            ("TWO_D_VECTOR", "Two D Vector"),
                            ("ONE_D_VECTOR", "One D Vector"),
                            ("FOUR_D_VECTOR", "Four D Vector"),
                            ("N_VECTOR", "N Vector"),
                        ],
                        choices_enum=core.enums.MeasurementKindChoices,
                        help_text="The data type (if a metric)",
                        max_length=14,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "edge_expressions",
            },
            bases=("core.expression",),
        ),
        migrations.CreateModel(
            name="MediaStore",
            fields=[
                (
                    "s3store_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.s3store",
                    ),
                ),
            ],
            bases=("core.s3store",),
        ),
        migrations.CreateModel(
            name="RelationCategory",
            fields=[
                (
                    "expression_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.expression",
                    ),
                ),
            ],
            options={
                "default_related_name": "relation_classes",
            },
            bases=("core.expression",),
        ),
        migrations.CreateModel(
            name="StructureCategory",
            fields=[
                (
                    "expression_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.expression",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        help_text="The structure identifier that the node relates to",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "structure_categories",
            },
            bases=("core.expression",),
        ),
        migrations.CreateModel(
            name="ReagentMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "volume",
                    models.FloatField(
                        help_text="The volume of the reagent in the protocol in µl. If you add some mass of a reagent, you can use the mass field instead.",
                        null=True,
                    ),
                ),
                (
                    "mass",
                    models.FloatField(
                        help_text="The mass of the reagent in the protocol in µg. If you add some volume of a reagent, you can use the volume field instead."
                    ),
                ),
                (
                    "protocol_step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reagent_mappings",
                        to="core.protocolstep",
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="used_in",
                        to="core.reagent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProtocolStepTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the protocol", max_length=1000
                    ),
                ),
                ("plate_children", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "kind",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("PREP", "Preperation"),
                            ("ADD_REAGENT", "Add Reagent"),
                            ("MEASUREMENT", "Measurement"),
                            ("STORAGE", "Storage"),
                            ("CUSTOM", "Custom"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        choices_enum=core.enums.ProtocolStepKindChoices,
                        default="UNKNOWN",
                        help_text="The kind of the step (can be more closely defined in the expression)",
                        max_length=11,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="protocolstep",
            name="for_reagent",
            field=models.ForeignKey(
                help_text="This field is set if the protocol step is used to create another reagent",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="creation_steps",
                to="core.reagent",
            ),
        ),
        migrations.AddField(
            model_name="protocolstep",
            name="performed_by",
            field=models.ForeignKey(
                help_text="The user that performed the step",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="protocolstep",
            name="template",
            field=models.ForeignKey(
                help_text="The template that was used to create the step",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="steps",
                to="core.protocolsteptemplate",
            ),
        ),
        migrations.CreateModel(
            name="Protocol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "performed_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the protocol", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the protocol",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "experiment",
                    models.ForeignKey(
                        help_text="The experiment that this protocol was designed for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocols",
                        to="core.experiment",
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(
                        help_text="This field is set if the protocol step is used to create another reagent",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="protocol",
                        to="core.reagent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Ontology",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the ontology", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the ontology", max_length=1000
                    ),
                ),
                (
                    "purl",
                    models.CharField(
                        help_text="The PURL of the ontology", max_length=1000, null=True
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        help_text="The user that this ontol",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ontology",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "node_id",
                    models.CharField(
                        help_text="The node thdat is used to materialize the graph",
                        max_length=1000,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The time the view was created"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        help_text="The user that created the view",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "graph",
                    models.ForeignKey(
                        help_text="The graph this materialized graph belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_views",
                        to="core.graph",
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The query that is used to materialize the graph",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="core.nodequery",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="nodequery",
            name="ontology",
            field=models.ForeignKey(
                help_text="The ontology this query belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="node_queries",
                to="core.ontology",
            ),
        ),
        migrations.CreateModel(
            name="Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the model", max_length=1000
                    ),
                ),
                (
                    "materialized_graph",
                    models.ForeignKey(
                        blank=True,
                        help_text="The materialized grpah this model was trained on",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="models",
                        to="core.materializedgraph",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalProtocolStepTemplate",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the protocol", max_length=1000
                    ),
                ),
                ("plate_children", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "kind",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("PREP", "Preperation"),
                            ("ADD_REAGENT", "Add Reagent"),
                            ("MEASUREMENT", "Measurement"),
                            ("STORAGE", "Storage"),
                            ("CUSTOM", "Custom"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        choices_enum=core.enums.ProtocolStepKindChoices,
                        default="UNKNOWN",
                        help_text="The kind of the step (can be more closely defined in the expression)",
                        max_length=11,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.protocolsteptemplate",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol step template",
                "verbose_name_plural": "historical protocol step templates",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocolStep",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "performed_at",
                    models.DateTimeField(auto_created=True, blank=True, editable=False),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "for_entity_id",
                    models.CharField(
                        blank=True,
                        help_text="The entity that this step is for",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "variable_mappings",
                    models.JSONField(
                        blank=True,
                        help_text="A mapping of variables to values for this step",
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "for_reagent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This field is set if the protocol step is used to create another reagent",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.reagent",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.protocolstep",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The user that performed the step",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The template that was used to create the step",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.protocolsteptemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol step",
                "verbose_name_plural": "historical protocol steps",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProtocol",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "performed_at",
                    models.DateTimeField(auto_created=True, blank=True, editable=False),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the protocol", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the protocol",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The experiment that this protocol was designed for",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.experiment",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.protocol",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reagent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This field is set if the protocol step is used to create another reagent",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.reagent",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical protocol",
                "verbose_name_plural": "historical protocols",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGraph",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the entity group", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the entity group",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The experiment this entity group belongs to (if its part of an experiment)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.experiment",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.graph",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ontology",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ontology this graph adheres to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.ontology",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The user that this entity group belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical graph",
                "verbose_name_plural": "historical graphs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalExperiment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the experiment", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the experiment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.experiment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical experiment",
                "verbose_name_plural": "historical experiments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="graphquery",
            name="ontology",
            field=models.ForeignKey(
                help_text="The ontology this query belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="graph_queries",
                to="core.ontology",
            ),
        ),
        migrations.AddField(
            model_name="graph",
            name="ontology",
            field=models.ForeignKey(
                help_text="The ontology this graph adheres to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="graphs",
                to="core.ontology",
            ),
        ),
        migrations.AddField(
            model_name="graph",
            name="user",
            field=models.ForeignKey(
                help_text="The user that this entity group belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="entity_groups",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="expression",
            name="ontology",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="expressions",
                to="core.ontology",
            ),
        ),
        migrations.AddConstraint(
            model_name="reagent",
            constraint=models.UniqueConstraint(
                fields=("lot_id", "expression"),
                name="Only one reagent per expression and lot_id",
            ),
        ),
        migrations.AddField(
            model_name="ontology",
            name="store",
            field=models.ForeignKey(
                blank=True,
                help_text="The store of the image class",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.mediastore",
            ),
        ),
        migrations.AddField(
            model_name="model",
            name="store",
            field=models.ForeignKey(
                blank=True,
                help_text="The store of the model",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="models",
                to="core.mediastore",
            ),
        ),
        migrations.AddField(
            model_name="expression",
            name="store",
            field=models.ForeignKey(
                blank=True,
                help_text="The store of the image class",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.mediastore",
            ),
        ),
        migrations.AddConstraint(
            model_name="expression",
            constraint=models.UniqueConstraint(
                fields=("ontology", "age_name"), name="unique_label_in_ontology"
            ),
        ),
    ]
