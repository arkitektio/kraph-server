# Generated by Django 4.2.8 on 2025-03-30 12:06

import core.enums
import core.fields
import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("authentikate", "0002_alter_user_unique_together_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of category",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "purl",
                    models.CharField(
                        help_text="The PURL (Persistent Uniform Resource Locator)",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.JSONField(
                        default=core.models.random_color,
                        help_text="The color of the entity class as RGB",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "categories",
            },
        ),
        migrations.CreateModel(
            name="CategoryTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="The value of the tag", max_length=1000, unique=True
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the tag",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Experiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the experiment", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the experiment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Graph",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the entity group", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the entity group",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        blank=True,
                        help_text="The experiment this entity group belongs to (if its part of an experiment)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graphs",
                        to="core.experiment",
                    ),
                ),
                (
                    "pinned_by",
                    models.ManyToManyField(
                        help_text="The users that have this query active",
                        related_name="pinned_graphs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that this entity group belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entity_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GraphQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query",
                    models.CharField(
                        help_text="The query that is used to materialize the graph",
                        max_length=7000,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the materialized graph", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the materialized graph",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of the materialized graph (i.e path, property, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        default=None,
                        help_text="The columns (if ViewKind is Table)",
                        null=True,
                    ),
                ),
                (
                    "graph",
                    models.ForeignKey(
                        help_text="The graph this query belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graph_queries",
                        to="core.graph",
                    ),
                ),
                (
                    "pinned_by",
                    models.ManyToManyField(
                        help_text="The users that have this query active",
                        related_name="pinned_graph_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "relevant_for",
                    models.ManyToManyField(
                        help_text="The expression that this query should be mostly used for",
                        related_name="relevant_graph_queries",
                        to="core.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MaterializedView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "materialized_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The time the view was materialized. Newer created or deleted_instances are not part of the view",
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="The time the view was created. Newer created or deleted_instances are not part of the view",
                        null=True,
                    ),
                ),
                (
                    "valid_to",
                    models.DateTimeField(
                        blank=True,
                        help_text="The time the view was created. Newer created or deleted_instances are not part of the view",
                        null=True,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        help_text="The user that created the view",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graph_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The query that is used to materialize the graph",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="core.graphquery",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="S3Store",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "path",
                    core.fields.S3Field(
                        blank=True,
                        help_text="The stodre of the image",
                        max_length=500,
                        null=True,
                        unique=True,
                    ),
                ),
                ("key", models.CharField(max_length=1000)),
                ("bucket", models.CharField(max_length=1000)),
                ("populated", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="BigFileStore",
            fields=[
                (
                    "s3store_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.s3store",
                    ),
                ),
            ],
            bases=("core.s3store",),
        ),
        migrations.CreateModel(
            name="EdgeCategory",
            fields=[
                (
                    "category_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.category",
                    ),
                ),
                (
                    "source_definition",
                    models.JSONField(
                        default=dict,
                        help_text="Filters for the right side of the metric (e.g. which tags the right side should have)",
                        null=True,
                    ),
                ),
                (
                    "target_definition",
                    models.JSONField(
                        default=dict,
                        help_text="Filters for the left side of the metric (e.g. which tags the left side should have)",
                        null=True,
                    ),
                ),
            ],
            bases=("core.category",),
        ),
        migrations.CreateModel(
            name="MediaStore",
            fields=[
                (
                    "s3store_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.s3store",
                    ),
                ),
            ],
            bases=("core.s3store",),
        ),
        migrations.CreateModel(
            name="NodeCategory",
            fields=[
                (
                    "category_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.category",
                    ),
                ),
                (
                    "position_x",
                    models.FloatField(
                        help_text="The x position of the node class in the graph (if a node)",
                        null=True,
                    ),
                ),
                (
                    "position_y",
                    models.FloatField(
                        help_text="The y position of the  node class in the graph (if a node)",
                        null=True,
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        help_text="The height of the  node class in the graph (if a node)",
                        null=True,
                    ),
                ),
                (
                    "width",
                    models.FloatField(
                        help_text="The width of the  node class in the graph (if a node)",
                        null=True,
                    ),
                ),
            ],
            bases=("core.category",),
        ),
        migrations.CreateModel(
            name="ScatterPlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the scatter plot", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the scatter plot",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "id_column",
                    models.CharField(
                        help_text="The column that assigns the row_id (could be an edge, a node, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "x_column",
                    models.CharField(
                        help_text="The column that assigns the x value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "x_id_column",
                    models.CharField(
                        help_text="The column that assigns the x_id value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "y_column",
                    models.CharField(
                        help_text="The column that assigns the y value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "y_id_column",
                    models.CharField(
                        help_text="The column that assigns an ID to the y value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "color_column",
                    models.CharField(
                        help_text="The column that assigns the color value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "size_column",
                    models.CharField(
                        help_text="The column that assigns the size value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "shape_column",
                    models.CharField(
                        help_text="The column that assigns the shape value",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "creator",
                    models.ForeignKey(
                        help_text="The user that created the scatter plot",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scatter_plots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The query this scatter plot was trained on",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scatter_plots",
                        to="core.graphquery",
                    ),
                ),
                (
                    "view",
                    models.ForeignKey(
                        blank=True,
                        help_text="If this scatter plot is based on a materialized view, this is the view",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scatter_plots",
                        to="core.materializedview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query",
                    models.CharField(
                        help_text="The query that is used to materialize the graph",
                        max_length=7000,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the materialized graph", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the materialized graph",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of the materialized graph (i.e path, property, etc.)",
                        max_length=1000,
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        default=None,
                        help_text="The columns (if ViewKind is Table)",
                        null=True,
                    ),
                ),
                (
                    "graph",
                    models.ForeignKey(
                        help_text="The graph this query belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_queries",
                        to="core.graph",
                    ),
                ),
                (
                    "pinned_by",
                    models.ManyToManyField(
                        help_text="The users that have this query active",
                        related_name="pinned_node_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "relevant_for_nodes",
                    models.ManyToManyField(
                        help_text="The entities that this query should be mostly used for",
                        related_name="relevant_node_queries",
                        to="core.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalExperiment",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the experiment", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the experiment",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.experiment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical experiment",
                "verbose_name_plural": "historical experiments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="category",
            name="graph",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.graph"
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="tags",
            field=models.ManyToManyField(
                blank=True, help_text="The tags of the category", to="core.categorytag"
            ),
        ),
        migrations.CreateModel(
            name="EntityCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "instance_kind",
                    models.CharField(
                        blank=True,
                        help_text="What an instance of this class represents (e.g. a LOT, an object, etc.)",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the entity class", max_length=1000
                    ),
                ),
            ],
            options={
                "default_related_name": "entity_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="MeasurementCategory",
            fields=[
                (
                    "edgecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.edgecategory",
                    ),
                ),
                (
                    "metric_kind",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("INT", "Int"),
                            ("FLOAT", "Float"),
                            ("DATETIME", "Datetime"),
                            ("STRING", "String"),
                            ("CATEGORY", "Category"),
                            ("BOOLEAN", "Boolean"),
                            ("THREE_D_VECTOR", "Three D Vector"),
                            ("TWO_D_VECTOR", "Two D Vector"),
                            ("ONE_D_VECTOR", "One D Vector"),
                            ("FOUR_D_VECTOR", "Four D Vector"),
                            ("N_VECTOR", "N Vector"),
                        ],
                        choices_enum=core.enums.MeasurementKindChoices,
                        help_text="The data type (if a metric)",
                        max_length=14,
                        null=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the entity class", max_length=1000
                    ),
                ),
            ],
            options={
                "default_related_name": "measurement_categories",
            },
            bases=("core.edgecategory",),
        ),
        migrations.CreateModel(
            name="MetricCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "metric_kind",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("INT", "Int"),
                            ("FLOAT", "Float"),
                            ("DATETIME", "Datetime"),
                            ("STRING", "String"),
                            ("CATEGORY", "Category"),
                            ("BOOLEAN", "Boolean"),
                            ("THREE_D_VECTOR", "Three D Vector"),
                            ("TWO_D_VECTOR", "Two D Vector"),
                            ("ONE_D_VECTOR", "One D Vector"),
                            ("FOUR_D_VECTOR", "Four D Vector"),
                            ("N_VECTOR", "N Vector"),
                        ],
                        choices_enum=core.enums.MeasurementKindChoices,
                        help_text="The data type (if a metric)",
                        max_length=14,
                        null=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the entity class", max_length=1000
                    ),
                ),
                (
                    "structure_definition",
                    models.JSONField(
                        default=dict,
                        help_text="Filters for the right side of the metric (e.g. which tags the right side should have)",
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "metric_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="NaturalEventCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "source_definitions",
                    models.JSONField(
                        default=list,
                        help_text="The categories or expressions that an event of this class can source from (source edges)",
                    ),
                ),
                (
                    "target_definitions",
                    models.JSONField(
                        default=list,
                        help_text="The categories or expressions that an of this class can target to (target edges)",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the natural event class",
                        max_length=1000,
                    ),
                ),
            ],
            options={
                "default_related_name": "natural_event_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="ProtocolEventCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "source_definitions",
                    models.JSONField(
                        default=list,
                        help_text="The categories or expressions that an event of this class can sourc from (source edges)",
                    ),
                ),
                (
                    "target_definitions",
                    models.JSONField(
                        default=list,
                        help_text="The categories or expressions that an of this class can target to (target edges)",
                    ),
                ),
                (
                    "variable_definitions",
                    models.JSONField(
                        default=list,
                        help_text="The variables of a instance this protocol event will needs (properties on the node)",
                    ),
                ),
                ("plate_children", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the natural event class",
                        max_length=1000,
                    ),
                ),
            ],
            options={
                "default_related_name": "protocol_event_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="ReagentCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "instance_kind",
                    models.CharField(
                        blank=True,
                        help_text="What an instance of this class represents (e.g. a LOT, an object, etc.)",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label of the entity class", max_length=1000
                    ),
                ),
            ],
            options={
                "default_related_name": "reagent_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="RelationCategory",
            fields=[
                (
                    "edgecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.edgecategory",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="How this step acts in the protocol (e.g. as which reagent)",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "relation_categories",
            },
            bases=("core.edgecategory",),
        ),
        migrations.CreateModel(
            name="StructureCategory",
            fields=[
                (
                    "nodecategory_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.nodecategory",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        help_text="The structure identifier that the node relates to",
                        max_length=1000,
                        null=True,
                    ),
                ),
            ],
            options={
                "default_related_name": "structure_categories",
            },
            bases=("core.nodecategory",),
        ),
        migrations.CreateModel(
            name="Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the model", max_length=1000
                    ),
                ),
                (
                    "materialized_graph",
                    models.ForeignKey(
                        blank=True,
                        help_text="The materialized grpah this model was trained on",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="models",
                        to="core.materializedview",
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        blank=True,
                        help_text="The store of the model",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="models",
                        to="core.mediastore",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalGraph",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the entity group", max_length=1000
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="The description of the entity group",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "age_name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the graph class in the age graph",
                        max_length=1000,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "experiment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The experiment this entity group belongs to (if its part of an experiment)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.experiment",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.graph",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The user that this entity group belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The store of the image if associated with the category",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.mediastore",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical graph",
                "verbose_name_plural": "historical graphs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="graph",
            name="store",
            field=models.ForeignKey(
                blank=True,
                help_text="The store of the image if associated with the category",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.mediastore",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="store",
            field=models.ForeignKey(
                blank=True,
                help_text="The store of the image if associated with the category",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.mediastore",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="category",
            unique_together={("graph", "age_name")},
        ),
    ]
